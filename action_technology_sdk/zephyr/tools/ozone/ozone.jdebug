/*********************************************************************
*                 (c) SEGGER Microcontroller GmbH                    *
*                      The Embedded Experts                          *
*                         www.segger.com                             *
**********************************************************************

File          : ozone.jdebug
Created       : 13 Jul 2023 20:12
Ozone Version : V3.24
*/

/*********************************************************************
*
*       OnProjectLoad
*
* Function description
*   Project load routine. Required.
*
**********************************************************************
*/
void OnProjectLoad (void) {
  //
  // Dialog-generated settings
  //
  //Project.SetDevice ("Cortex-M33");
  Project.SetDevice ("LEOPARD");
  Project.SetHostIF ("USB", "50120677");
  Project.SetTargetIF ("SWD");
  Project.SetTIFSpeed ("10 MHz");
  Project.AddSvdFile ("$(InstallDir)/Config/CPU/Cortex-M33F.svd");
  //Project.SetOSPlugin("ZephyrPlugin_CM4");

  //
  // User settings
  //
  Project.AddPathSubstitute ("C:/auto_build/zs308b_dev", "$(ProjectDir)");
  File.Open ("$(ProjectDir)/../../../application/bt_watch/outdir/ats3085s_dev_watch_ext_nor/zephyr/zephyr.elf");
}

/*********************************************************************
*                                                                     
*       FaultDebug                                             
*                                                                     
* Function description                                                
*   Load Backtrace and Set PC/SP. Optional.                         
* Console Command
*   Script.Exec("FaultDebug")                                                   
**********************************************************************
*/                                                         
void FaultDebug (void) {
  unsigned int SP;
  unsigned int LR;
  unsigned int PC;
  
  SP = Target.GetReg("SP") + 0xc8;
  Target.SetReg("R4", Target.ReadU32(SP+0x0));
  Target.SetReg("R5", Target.ReadU32(SP+0x4));
  Target.SetReg("R6", Target.ReadU32(SP+0x8));
  Target.SetReg("R7", Target.ReadU32(SP+0xc));
  Target.SetReg("R8", Target.ReadU32(SP+0x10));
  Target.SetReg("R9", Target.ReadU32(SP+0x14));
  Target.SetReg("R10", Target.ReadU32(SP+0x18));
  Target.SetReg("R11", Target.ReadU32(SP+0x1c));
  
  LR = Target.ReadU32(SP+0x2c);
  if (LR & 0x04) {
    SP = Target.ReadU32(SP+0x20);
  } else {
    SP = Target.ReadU32(SP+0x28);
  }
  
  Target.SetReg("R0", Target.ReadU32(SP+0x0));
  Target.SetReg("R1", Target.ReadU32(SP+0x4));
  Target.SetReg("R2", Target.ReadU32(SP+0x8));
  Target.SetReg("R3", Target.ReadU32(SP+0xc));
  Target.SetReg("R12", Target.ReadU32(SP+0x10));
  Target.SetReg("LR", Target.ReadU32(SP+0x14));
  
  PC = Target.ReadU32(SP+0x18);
  if (LR & 0x10) {
    Target.SetReg("SP", SP+0x20);
  } else {
    Target.SetReg("SP", SP+0x68);
  }
  Debug.SetNextPC(PC); 
  Show.PC();
}

/*********************************************************************
*                                                                     
*       OopsDebug                                             
*                                                                     
* Function description                                                
*   Load Backtrace and Set PC/SP. Optional.                         
* Console Command
*   Script.Exec("OopsDebug")                                                   
**********************************************************************
*/                                                         
void OopsDebug (void) {
  unsigned int SP;
  unsigned int LR;
  unsigned int PC;
  
  SP = Target.GetReg("SP") + 0xb8;
  Target.SetReg("R4", Target.ReadU32(SP+0x0));
  Target.SetReg("R5", Target.ReadU32(SP+0x4));
  Target.SetReg("R6", Target.ReadU32(SP+0x8));
  Target.SetReg("R7", Target.ReadU32(SP+0xc));
  Target.SetReg("R8", Target.ReadU32(SP+0x10));
  Target.SetReg("R9", Target.ReadU32(SP+0x14));
  Target.SetReg("R10", Target.ReadU32(SP+0x18));
  Target.SetReg("R11", Target.ReadU32(SP+0x1c));
  
  LR = Target.ReadU32(SP+0x2c);
  if (LR & 0x04) {
    SP = Target.ReadU32(SP+0x20);
  } else {
    SP = Target.ReadU32(SP+0x28);
  }
  
  PC = Target.ReadU32(SP+0x18);
  if (LR & 0x10) {
    Target.SetReg("SP", SP+0x20);
  } else {
    Target.SetReg("SP", SP+0x68);
  }
  Debug.SetNextPC(PC); 
  Show.PC();
}

/*********************************************************************
*                                                                     
*       TaskDebug                                             
*                                                                     
* Function description                                                
*   Load CallStack and Set PC/SP. Optional.                         
* Parameter
*   Thread -> SP
* Console Command
*   Script.Exec("TaskDebug")                                                   
**********************************************************************
*/                                                         
void TaskDebug (void) {
  unsigned int CONTROL;
  unsigned int TH;
  unsigned int SP;
  unsigned int LR;
  unsigned int PC;

  TH = Target.GetReg("SP"); // thread
  SP = Target.ReadU32(TH+0x50); // thread->callee_saved.psp
  CONTROL = Target.ReadU32(TH+0x111); // thread->arch.mode_exc_return
  PC = Target.ReadU32(SP+0x18);
  
  Target.SetReg("R0", Target.ReadU32(SP+0x0));
  Target.SetReg("R1", Target.ReadU32(SP+0x4));
  Target.SetReg("R2", Target.ReadU32(SP+0x8));
  Target.SetReg("R3", Target.ReadU32(SP+0xc));
  Target.SetReg("R12", Target.ReadU32(SP+0x10));
  Target.SetReg("LR", Target.ReadU32(SP+0x14));
    
  if (CONTROL & 0x10) {
    Target.SetReg("SP", SP+0x20);
  } else {
    Target.SetReg("SP", SP+0x68);
  }
  Debug.SetNextPC(PC); 
  Show.PC();
}

/*********************************************************************
*
*       AfterTargetReset
*
* Function description
*   Event handler routine. Optional.
*   The default implementation initializes SP and PC to reset values.
**
**********************************************************************
*/
void AfterTargetReset (void) {
  _SetupTarget();
}

/*********************************************************************
*
*       _SetupTarget
*
* Function description
*   Setup the target.
*   Called by AfterTargetReset() and AfterTargetDownload().
*
*   Auto-generated function. May be overridden by Ozone.
*
**********************************************************************
*/
void _SetupTarget(void) {
  unsigned int SP;                                                
  unsigned int PC;                                                
  unsigned int VectorTableAddr;                                   
                                                             
  VectorTableAddr = 0;//Elf.GetBaseAddr();                            
                                                                  
  if (VectorTableAddr != 0xFFFFFFFF) {                            
    SP = Target.ReadU32(VectorTableAddr);                         
    Target.SetReg("SP", SP);                                    
  } else {                                                        
    Util.Log("Project file error: failed to get program base"); 
  }                                                               
                                                                  
  PC = 0xFFFFFFFF;//Elf.GetEntryPointPC();                                     
                                                                  
  if (PC != 0xFFFFFFFF) {                                         
    Target.SetReg("PC", PC);                                    
  } else if (VectorTableAddr != 0xFFFFFFFF) {                     
    PC = Target.ReadU32(VectorTableAddr + 4);                     
    Target.SetReg("PC", PC);                                    
  }
}